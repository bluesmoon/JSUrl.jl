var documenterSearchIndex = {"docs":
[{"location":"index.html#JSUrl.jl-Documentation","page":"JSUrl.jl Documentation","title":"JSUrl.jl Documentation","text":"","category":"section"},{"location":"index.html","page":"JSUrl.jl Documentation","title":"JSUrl.jl Documentation","text":"JSUrl","category":"page"},{"location":"index.html#JSUrl","page":"JSUrl.jl Documentation","title":"JSUrl","text":"Julia implementation of JSUrl. See the JSURL docs for more details on the format.\n\n\n\n\n\n","category":"module"},{"location":"index.html#Methods","page":"JSUrl.jl Documentation","title":"Methods","text":"","category":"section"},{"location":"index.html","page":"JSUrl.jl Documentation","title":"JSUrl.jl Documentation","text":"Modules=[JSUrl]\nOrder=[:function]","category":"page"},{"location":"index.html#JSUrl.encode-Tuple{AbstractChar}","page":"JSUrl.jl Documentation","title":"JSUrl.encode","text":"Encode a string type with JSUrl safe characters\n\n\n\n\n\n","category":"method"},{"location":"index.html#JSUrl.parse-Tuple{AbstractString}","page":"JSUrl.jl Documentation","title":"JSUrl.parse","text":"Parse a JSUrl serialized string into a Julia object.\n\nTo deserialize your own type, look for a Dict with a single string key matching your typename. The value will be the output of repr(::YourType)\n\n\n\n\n\n","category":"method"},{"location":"index.html#JSUrl.stringify-Tuple{Number}","page":"JSUrl.jl Documentation","title":"JSUrl.stringify","text":"Serialize a Julia object into a JSUrl string. This serialization is lossy as not all type information can be recovered.\n\nTo implement it for your own type, implement show(::YourType).\n\n\n\n\n\n","category":"method"},{"location":"index.html#Index","page":"JSUrl.jl Documentation","title":"Index","text":"","category":"section"},{"location":"index.html","page":"JSUrl.jl Documentation","title":"JSUrl.jl Documentation","text":"","category":"page"},{"location":"recipes.html#Examples-of-JSUrl-usage","page":"Examples of JSUrl usage","title":"Examples of JSUrl usage","text":"","category":"section"},{"location":"recipes.html#Encode-Julia-objects","page":"Examples of JSUrl usage","title":"Encode Julia objects","text":"","category":"section"},{"location":"recipes.html#Scalar-objects","page":"Examples of JSUrl usage","title":"Scalar objects","text":"","category":"section"},{"location":"recipes.html","page":"Examples of JSUrl usage","title":"Examples of JSUrl usage","text":"julia> using JSUrl\n\njulia> JSUrl.stringify(nothing)\n\"~null\"\n\njulia> JSUrl.stringify(123)\n\"~123\"\n\njulia> JSUrl.stringify(-1.23)\n\"~-1.23\"\n\njulia> JSUrl.stringify(-Inf)\n\"~-Inf\"\n\njulia> JSUrl.stringify(\"hello world\\u203c\")\n\"~'hello*20world**203c\"","category":"page"},{"location":"recipes.html#Collections","page":"Examples of JSUrl usage","title":"Collections","text":"","category":"section"},{"location":"recipes.html","page":"Examples of JSUrl usage","title":"Examples of JSUrl usage","text":"julia> JSUrl.stringify([\"hello world\\u203c\", 123, -Inf, missing])\n\"~(~'hello*20world**203c~123~-Inf~null)\"\n\njulia> JSUrl.stringify(Dict(:h => \"hello world\\u203c\", :n => 123, :i => -Inf, :m => missing])\n\"~(h~'hello*20world**203c~i~-Inf~m~null~n~123)\"","category":"page"},{"location":"recipes.html#Parsing","page":"Examples of JSUrl usage","title":"Parsing","text":"","category":"section"},{"location":"recipes.html","page":"Examples of JSUrl usage","title":"Examples of JSUrl usage","text":"julia> JSUrl.parse(\"~null\")\nnothing\n\njulia> JSUrl.parse(\"~123\")\n123\n\njulia> JSUrl.parse(\"~-1.23\")\n-1.23\n\njulia> JSUrl.parse(\"~-Inf\")\n-Inf\n\njulia> JSUrl.parse(\"~'hello*20world**203c\")\n\"hello world‼\"\n\njulia> JSUrl.parse(\"~(~'hello*20world**203c~123~-Inf~null)\")\n4-element Vector{Any}:\n    \"hello world‼\"\n 123\n -Inf\n    nothing\n\n\njulia> JSUrl.parse(\"~(h~'hello*20world**203c~i~-Inf~m~null~n~123)\")\nDict{Any, Any} with 4 entries:\n  \"n\" => 123\n  \"m\" => nothing\n  \"h\" => \"hello world‼\"\n  \"i\" => -Inf","category":"page"},{"location":"recipes.html#Notes","page":"Examples of JSUrl usage","title":"Notes","text":"","category":"section"},{"location":"recipes.html","page":"Examples of JSUrl usage","title":"Examples of JSUrl usage","text":"Symbols, Strings and Characters are all encoded as Strings. When decoded, they end up as Strings.\nmissing and nothing are encoded as \"~null\". When decoded, they will end up as nothing.\nFunctions are encoded as \"~fn\" but when decoded will end up as nothing since functions cannot be serialized.\nTuples, arrays and sets are all serialized as arrays. When decoded they come back as arrays.\nDicts, NamedTuples and Pairs are encoded as objects. When decoded they come back as dicts with keys converted to strings.\nNumbers are encoded as-is, including NaN, Inf and -Inf. They decode back to either Int or Float64.\nBoolean values are encoded as \"~true\" and \"~false\".\nOther types are serialized based on calling repr() on that type and storing the result as an object of Type:val. They decode to a Dict with the key being the typename as a string and the value being the repred value of the object.","category":"page"}]
}
